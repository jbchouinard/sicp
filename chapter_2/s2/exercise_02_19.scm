; SICP Exercise 2.19



; Define the procedures first-denomination, except-first-denomination, and no-more? in terms of primitive operations on list structures.

(define (cc amount coin-values)
  (cond ((= amount 0) 1)
        ((or (< amount 0) (no-more? coin-values)) 0)
        (else
         (+ (cc amount
                (except-first-denomination coin-values))
            (cc (- amount
                   (first-denomination coin-values))
                coin-values)))))

(define us-coins (list 50 25 10 5 1))
(define uk-coins (list 100 50 20 10 5 2 1 0.5))

(define (no-more? coin-values)
  (null? coin-values))

(define (first-denomination coin-values)
  (car coin-values))

(define (except-first-denomination coin-values)
  (cdr coin-values))

; Does the order of the list coin-values affect the answer produced by cc? Why or why not?

;(cc 125 us-coins)
; 558
;(cc 125 (reverse us-coins))
; 558

; Changing the order of the coins does not change the answer produced. The process generated by cc will be a tree structure where every combination of coins that adds up to less than the amount demanded will be a branch node, and combinations equal to or up to one denomination value above the amount will be a leaf node. The process then counts the number of leaf nodes where the change adds up to amount. Changing the order of the coin values changes the shape of the tree but not the number of nodes, and not the number of leaf nodes that add up to the amount, so the answer remains the same.
