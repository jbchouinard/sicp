(load "~/.schemerc.scm")

(define (make-table)
  (list 'table 'end))

(define (table? tbl)
  (eq? 'table (car tbl)))

(define (table-set! table key value)
  (assert (table? table) "not a table")
  (define (set-iter tbl)
    (cond ((eq? 'end (car tbl)) (insert! tbl (list key value)))
          ((eq? (caar tbl) key) (set-cdr! (car tbl) (list value)))
          (else (set-iter (cdr tbl)))))
  (set-iter (cdr table)))

(define (table-lookup table key)
  (assert (table? table) "not a table")
  (define (get-iter tbl)
    (cond ((eq? 'end (car tbl)) (error "key not found"))
          ((eq? (caar tbl) key) (cadar tbl))
          (else (get-iter (cdr tbl)))))
  (get-iter (cdr table)))

(define (table-get table key default)
  (assert (table? table) "not a table")
  (define (get-iter tbl)
    (cond ((eq? 'end (car tbl)) default)
          ((eq? (caar tbl) key) (cadar tbl))
          (else (get-iter (cdr tbl)))))
  (get-iter (cdr table)))

(define (table-has-key table key)
  (assert (table? table) "not a table")
  (define (get-iter tbl)
    (cond ((eq? 'end (car tbl)) false)
          ((eq? (caar tbl) key) true)
          (else (get-iter (cdr tbl)))))
  (get-iter (cdr table)))

(define (table-memoize! table key thunk)
  (if (table-has-key table key)
    (table-lookup table key)
    (let ((val (thunk)))
      (table-set! table key val)
      val)))
